
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
00000106 l       .debug_info	00000000 
00000106 l       .debug_info	00000000 
00000106 l       .debug_info	00000000 
00000106 l       .debug_info	00000000 
00000106 l       .debug_info	00000000 
00000106 l       .debug_info	00000000 
00000106 l       .debug_info	00000000 
00000106 l       .debug_info	00000000 
00000106 l       .debug_info	00000000 
00000106 l       .debug_info	00000000 
00000106 l       .debug_info	00000000 
00000106 l       .debug_info	00000000 
00000106 l       .debug_info	00000000 
00000106 l       .debug_info	00000000 
00000106 l       .debug_info	00000000 
00000106 l       .debug_info	00000000 
00000106 l       .debug_info	00000000 
00000106 l       .debug_info	00000000 
00000106 l       .debug_info	00000000 
00000106 l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000400 g       *ABS*	00000000 __flash_size
00000008 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
00000344 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
0000033c g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
00000384 g       .text	00000000 __text_end
00000106  w      .debug_info	00000000 .hidden path_planner.c.2be3d928
02000000 g       .bss	00000000 __bss_start
00000368 g     F .text	0000001c memset
00000054 g     F .text	000002e8 main
00000040 g       *ABS*	00000000 __ram_size
02000040 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
00000388 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    04010113          	addi	x2,x2,64 # 2000040 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    38800593          	addi	x11,x0,904
  1c:	    00000613          	addi	x12,x0,0
  20:	    324000ef          	jal	x1,344 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    334000ef          	jal	x1,368 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    2fc000ef          	jal	x1,33c <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__ram_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ###     void _put_str(char *str) { }
     ### 
     ### #endif
     ### 
     ### // main function
     ### int main(int argc, char const *argv[]) {
  54:	                ff010113          	addi	x2,x2,-16
     ### idx = 0;
     ###    
     ### 
     ### // ############# Add your code here #############
     ### // Initialize graph array with the provided values efficiently
     ### graph[0] = 0x202A2621;
  58:	                202a27b7          	lui	x15,0x202a2
     ### int main(int argc, char const *argv[]) {
  5c:	                00112623          	sw	x1,12(x2)
  60:	                00812423          	sw	x8,8(x2)
     ### graph[0] = 0x202A2621;
  64:	                62178793          	addi	x15,x15,1569 # 202a2621 <__global_pointer$+0x1e2a1e21>
  68:	                02000437          	lui	x8,0x2000
  6c:	                00f42823          	sw	x15,16(x8) # 2000010 <__bss_end+0x10>
     ### graph[1] = 0x212B2220;
  70:	                212b27b7          	lui	x15,0x212b2
  74:	                22078793          	addi	x15,x15,544 # 212b2220 <__global_pointer$+0x1f2b1a20>
  78:	                00f42a23          	sw	x15,20(x8)
     ### graph[2] = 0x25242321;
  7c:	                252427b7          	lui	x15,0x25242
  80:	                32178793          	addi	x15,x15,801 # 25242321 <__global_pointer$+0x23241b21>
  84:	                00f42c23          	sw	x15,24(x8)
     ### graph[3] = 0x23232322;
  88:	                232327b7          	lui	x15,0x23232
  8c:	                32278793          	addi	x15,x15,802 # 23232322 <__global_pointer$+0x21231b22>
  90:	                00f42e23          	sw	x15,28(x8)
     ### graph[4] = 0x24242422;
  94:	                242427b7          	lui	x15,0x24242
  98:	                42278793          	addi	x15,x15,1058 # 24242422 <__global_pointer$+0x22241c22>
  9c:	                02f42023          	sw	x15,32(x8)
     ### graph[5] = 0x25252522;
  a0:	                252527b7          	lui	x15,0x25252
  a4:	                52278793          	addi	x15,x15,1314 # 25252522 <__global_pointer$+0x23251d22>
  a8:	                02f42223          	sw	x15,36(x8)
     ### graph[6] = 0x29282720;
  ac:	                292827b7          	lui	x15,0x29282
  b0:	                72078793          	addi	x15,x15,1824 # 29282720 <__global_pointer$+0x27281f20>
  b4:	                02f42423          	sw	x15,40(x8)
     ### graph[7] = 0x27272726;
  b8:	                272727b7          	lui	x15,0x27272
  bc:	                72678793          	addi	x15,x15,1830 # 27272726 <__global_pointer$+0x25271f26>
  c0:	                02f42623          	sw	x15,44(x8)
     ### graph[8] = 0x28282826;
  c4:	                282837b7          	lui	x15,0x28283
  c8:	                82678793          	addi	x15,x15,-2010 # 28282826 <__global_pointer$+0x26282026>
  cc:	                02f42823          	sw	x15,48(x8)
     ### graph[9] = 0x29292926;
  d0:	                292937b7          	lui	x15,0x29293
  d4:	                92678793          	addi	x15,x15,-1754 # 29292926 <__global_pointer$+0x27292126>
  d8:	                02f42a23          	sw	x15,52(x8)
     ### graph[10] = 0x3A382B20;
  dc:	                3a3837b7          	lui	x15,0x3a383
  e0:	                b2078793          	addi	x15,x15,-1248 # 3a382b20 <__global_pointer$+0x38382320>
  e4:	                02f42c23          	sw	x15,56(x8)
     ### graph[11] = 0x332C2A21;
  e8:	                332c37b7          	lui	x15,0x332c3
  ec:	                a2178793          	addi	x15,x15,-1503 # 332c2a21 <__global_pointer$+0x312c2221>
  f0:	                02f42e23          	sw	x15,60(x8)
     ### graph[12] = 0x2C2E2D2B;
  f4:	                2c2e37b7          	lui	x15,0x2c2e3
  f8:	                d2b78793          	addi	x15,x15,-725 # 2c2e2d2b <__global_pointer$+0x2a2e252b>
  fc:	                04f42023          	sw	x15,64(x8)
     ### graph[13] = 0x2D2D2D2C;
 100:	                2d2d37b7          	lui	x15,0x2d2d3
 104:	                d2c78793          	addi	x15,x15,-724 # 2d2d2d2c <__global_pointer$+0x2b2d252c>
 108:	                04f42223          	sw	x15,68(x8)
     ### graph[14] = 0x2E302F2C;
 10c:	                2e3037b7          	lui	x15,0x2e303
 110:	                f2c78793          	addi	x15,x15,-212 # 2e302f2c <__global_pointer$+0x2c30272c>
 114:	                04f42423          	sw	x15,72(x8)
     ### graph[15] = 0x2F2F2F2E;
 118:	                2f2f37b7          	lui	x15,0x2f2f3
 11c:	                f2e78793          	addi	x15,x15,-210 # 2f2f2f2e <__global_pointer$+0x2d2f272e>
 120:	                04f42623          	sw	x15,76(x8)
     ### graph[16] = 0x3032312E;
 124:	                303237b7          	lui	x15,0x30323
 128:	                12e78793          	addi	x15,x15,302 # 3032312e <__global_pointer$+0x2e32292e>
 12c:	                04f42823          	sw	x15,80(x8)
     ### graph[17] = 0x31313130;
 130:	                313137b7          	lui	x15,0x31313
 134:	                13078793          	addi	x15,x15,304 # 31313130 <__global_pointer$+0x2f312930>
 138:	                04f42a23          	sw	x15,84(x8)
     ### graph[18] = 0x32353330;
 13c:	                323537b7          	lui	x15,0x32353
 140:	                33078793          	addi	x15,x15,816 # 32353330 <__global_pointer$+0x30352b30>
 144:	                04f42c23          	sw	x15,88(x8)
     ### graph[19] = 0x3334322B;
 148:	                333437b7          	lui	x15,0x33343
 14c:	                22b78793          	addi	x15,x15,555 # 3334322b <__global_pointer$+0x31342a2b>
 150:	                04f42e23          	sw	x15,92(x8)
     ### graph[20] = 0x34343433;
 154:	                343437b7          	lui	x15,0x34343
 158:	                43378793          	addi	x15,x15,1075 # 34343433 <__global_pointer$+0x32342c33>
 15c:	                06f42023          	sw	x15,96(x8)
     ### graph[21] = 0x35373632;
 160:	                353737b7          	lui	x15,0x35373
 164:	                63278793          	addi	x15,x15,1586 # 35373632 <__global_pointer$+0x33372e32>
 168:	                06f42223          	sw	x15,100(x8)
     ### graph[22] = 0x36363635;
 16c:	                363637b7          	lui	x15,0x36363
 170:	                63578793          	addi	x15,x15,1589 # 36363635 <__global_pointer$+0x34362e35>
 174:	                06f42423          	sw	x15,104(x8)
     ### graph[23] = 0x373E3835;
 178:	                373e47b7          	lui	x15,0x373e4
 17c:	                83578793          	addi	x15,x15,-1995 # 373e3835 <__global_pointer$+0x353e3035>
 180:	                06f42623          	sw	x15,108(x8)
     ### graph[24] = 0x3839372A;
 184:	                383937b7          	lui	x15,0x38393
 188:	                72a78793          	addi	x15,x15,1834 # 3839372a <__global_pointer$+0x36392f2a>
 18c:	                06f42823          	sw	x15,112(x8)
     ### graph[25] = 0x39393938;
 190:	                393947b7          	lui	x15,0x39394
 194:	                93878793          	addi	x15,x15,-1736 # 39393938 <__global_pointer$+0x37393138>
 198:	                06f42a23          	sw	x15,116(x8)
     ### graph[26] = 0x3A3C3B2A;
 19c:	                3a3c47b7          	lui	x15,0x3a3c4
 1a0:	                b2a78793          	addi	x15,x15,-1238 # 3a3c3b2a <__global_pointer$+0x383c332a>
 1a4:	                06f42c23          	sw	x15,120(x8)
     ### graph[27] = 0x3B3B3B3A;
 1a8:	                3b3b47b7          	lui	x15,0x3b3b4
 1ac:	                b3a78793          	addi	x15,x15,-1222 # 3b3b3b3a <__global_pointer$+0x393b333a>
 1b0:	                06f42e23          	sw	x15,124(x8)
     ### graph[28] = 0x3C3E3D3A;
 1b4:	                3c3e47b7          	lui	x15,0x3c3e4
 1b8:	                d3a78793          	addi	x15,x15,-710 # 3c3e3d3a <__global_pointer$+0x3a3e353a>
 1bc:	                08f42023          	sw	x15,128(x8)
     ### graph[29] = 0x3D3D3D3C;
 1c0:	                3d3d47b7          	lui	x15,0x3d3d4
 1c4:	                d3c78793          	addi	x15,x15,-708 # 3d3d3d3c <__global_pointer$+0x3b3d353c>
 1c8:	                08f42223          	sw	x15,132(x8)
     ### graph[30] = 0x3E3F3C37;
 1cc:	                3e3f47b7          	lui	x15,0x3e3f4
 1d0:	                c3778793          	addi	x15,x15,-969 # 3e3f3c37 <__global_pointer$+0x3c3f3437>
 1d4:	                08f42423          	sw	x15,136(x8)
     ### graph[31] = 0x3F3F3F3E;
 1d8:	                3f3f47b7          	lui	x15,0x3f3f4
 1dc:	                f3e78793          	addi	x15,x15,-194 # 3f3f3f3e <__global_pointer$+0x3d3f373e>
 1e0:	                08f42623          	sw	x15,140(x8)
     ### 
     ### // Initialize distances
     ### for (i = 0; i < V; i++) {
     ###     distance[i] = 128;
 1e4:	                09040513          	addi	x10,x8,144
 1e8:	                02000613          	addi	x12,x0,32
 1ec:	                08000593          	addi	x11,x0,128
 1f0:	                178000ef          	jal	x1,368 <memset>
     ### }
     ### distance[END_POINT] = 0;
 1f4:	                00444783          	lbu	x15,4(x8)
     ### int main(int argc, char const *argv[]) {
 1f8:	                02000837          	lui	x16,0x2000
     ### distance[END_POINT] = 0;
 1fc:	                01f00713          	addi	x14,x0,31
 200:	                0ff7f793          	andi	x15,x15,255
 204:	                00f40433          	add	x8,x8,x15
 208:	                08040823          	sb	x0,144(x8)
     ### 
     ### // Simplified Bellman-Ford
     ### for (i = 0; i < V-1; i++) {
     ###     for (j = 0; j < V; j++) {
     ###         current = graph[j];
 20c:	                fa000337          	lui	x6,0xfa000
     ###         for (k = 0; k < 4; k++) {
     ###             node = (current >> (k * 8)) & 0x1F;
     ###             weight = (current >> (k * 8 + 5)) & 0x7;
     ###             if (distance[node] > distance[j] + weight) {
 210:	                09080e13          	addi	x28,x16,144 # 2000090 <__stack+0x50>
     ###         for (k = 0; k < 4; k++) {
 214:	                02000e93          	addi	x29,x0,32
     ###     for (j = 0; j < V; j++) {
 218:	                0b080f13          	addi	x30,x16,176
     ### int main(int argc, char const *argv[]) {
 21c:	   /----------> 09080693          	addi	x13,x16,144
     ###         current = graph[j];
 220:	   |  /-------> 00269793          	slli	x15,x13,0x2
 224:	   |  |         00f307b3          	add	x15,x6,x15
 228:	   |  |         dd07a883          	lw	x17,-560(x15)
 22c:	   |  |         00000613          	addi	x12,x0,0
     ###             node = (current >> (k * 8)) & 0x1F;
 230:	   |  |  /----> 00c8d7b3          	srl	x15,x17,x12
     ###             if (distance[node] > distance[j] + weight) {
 234:	   |  |  |      01f7f793          	andi	x15,x15,31
 238:	   |  |  |      0006c503          	lbu	x10,0(x13)
     ###             weight = (current >> (k * 8 + 5)) & 0x7;
 23c:	   |  |  |      00560593          	addi	x11,x12,5
     ###             if (distance[node] > distance[j] + weight) {
 240:	   |  |  |      01c787b3          	add	x15,x15,x28
     ###             weight = (current >> (k * 8 + 5)) & 0x7;
 244:	   |  |  |      00b8d5b3          	srl	x11,x17,x11
     ###             if (distance[node] > distance[j] + weight) {
 248:	   |  |  |      0007cf83          	lbu	x31,0(x15)
     ###             weight = (current >> (k * 8 + 5)) & 0x7;
 24c:	   |  |  |      0075f593          	andi	x11,x11,7
     ###             if (distance[node] > distance[j] + weight) {
 250:	   |  |  |      00b505b3          	add	x11,x10,x11
 254:	   |  |  |  /-- 01f5d463          	bge	x11,x31,25c <path_planner.c.2be3d928+0x156>
     ###                 distance[node] = distance[j] + weight;
 258:	   |  |  |  |   00b78023          	sb	x11,0(x15)
     ###         for (k = 0; k < 4; k++) {
 25c:	   |  |  |  \-> 00860613          	addi	x12,x12,8
 260:	   |  |  \----- fdd618e3          	bne	x12,x29,230 <path_planner.c.2be3d928+0x12a>
     ###     for (j = 0; j < V; j++) {
 264:	   |  |         00168693          	addi	x13,x13,1
 268:	   |  \-------- fbe69ce3          	bne	x13,x30,220 <path_planner.c.2be3d928+0x11a>
     ### for (i = 0; i < V-1; i++) {
 26c:	   |            fff70713          	addi	x14,x14,-1
 270:	   |            0ff77713          	andi	x14,x14,255
 274:	   \----------- fa0714e3          	bne	x14,x0,21c <path_planner.c.2be3d928+0x116>
     ###     }
     ### }
     ### 
     ### // Path reconstruction
     ### min_distance = 255;
     ### for (i = START_POINT; i != END_POINT; ) {
 278:	                020007b7          	lui	x15,0x2000
 27c:	                0007c783          	lbu	x15,0(x15) # 2000000 <__bss_end>
 280:	                02000637          	lui	x12,0x2000
     ### uint8_t min_node =(uint8_t )  0x020000d6;
 284:	                0d600813          	addi	x16,x0,214
     ### for (i = START_POINT; i != END_POINT; ) {
 288:	                0ff7f793          	andi	x15,x15,255
     ###     path_planned[idx] = i;
 28c:	                0b060313          	addi	x6,x12,176 # 20000b0 <__stack+0x70>
     ###     idx++;
     ###     min_distance = 255;
     ###     current = graph[i];
     ###     for (j = 0; j < 4; j++) {
 290:	                02000e13          	addi	x28,x0,32
     ### for (i = START_POINT; i != END_POINT; ) {
 294:	/-------------> 00464583          	lbu	x11,4(x12)
     ###     path_planned[idx] = i;
 298:	|               00670533          	add	x10,x14,x6
     ###     idx++;
 29c:	|               00170713          	addi	x14,x14,1
     ### for (i = START_POINT; i != END_POINT; ) {
 2a0:	|               0ff5f593          	andi	x11,x11,255
     ###     idx++;
 2a4:	|               0ff77713          	andi	x14,x14,255
     ### for (i = START_POINT; i != END_POINT; ) {
 2a8:	|           /-- 02f59e63          	bne	x11,x15,2e4 <path_planner.c.2be3d928+0x1de>
     ###             min_node = node;
     ###         }
     ###     }
     ###     i = min_node;
     ### }
     ### path_planned[idx++] = END_POINT;
 2ac:	|           |   00464783          	lbu	x15,4(x12)
     ### 
     ###     // ##############################################
     ### 
     ###     // the node values are written into data memory sequentially.
     ###     for ( i = 0; i < idx; ++i) {
     ###         NODE_POINT = path_planned[i];
 2b0:	|           |   02000637          	lui	x12,0x2000
     ### path_planned[idx++] = END_POINT;
 2b4:	|           |   00f50023          	sb	x15,0(x10)
     ###     for ( i = 0; i < idx; ++i) {
 2b8:	|  /--------|-> 05068793          	addi	x15,x13,80
 2bc:	|  |        |   0ff7f793          	andi	x15,x15,255
 2c0:	|  |  /-----|-- 06e7e663          	bltu	x15,x14,32c <path_planner.c.2be3d928+0x226>
     ###         
     ###     }
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
 2c4:	|  |  |     |   020007b7          	lui	x15,0x2000
 2c8:	|  |  |     |   00100713          	addi	x14,x0,1
 2cc:	|  |  |     |   00e78623          	sb	x14,12(x15) # 200000c <__bss_end+0xc>
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
     ### }
 2d0:	|  |  |     |   00c12083          	lw	x1,12(x2)
 2d4:	|  |  |     |   00812403          	lw	x8,8(x2)
 2d8:	|  |  |     |   00000513          	addi	x10,x0,0
 2dc:	|  |  |     |   01010113          	addi	x2,x2,16
 2e0:	|  |  |     |   00008067          	jalr	x0,0(x1)
     ###     path_planned[idx] = i;
 2e4:	|  |  |     \-> 00f50023          	sb	x15,0(x10)
     ###     current = graph[i];
 2e8:	|  |  |         00279793          	slli	x15,x15,0x2
 2ec:	|  |  |         00f607b3          	add	x15,x12,x15
 2f0:	|  |  |         0107ae83          	lw	x29,16(x15)
 2f4:	|  |  |         00000593          	addi	x11,x0,0
 2f8:	|  |  |         00080793          	addi	x15,x16,0
     ###     min_distance = 255;
 2fc:	|  |  |         0ff00813          	addi	x16,x0,255
     ###         node = (current >> (j * 8)) & 0x1F;
 300:	|  |  |  /----> 00bed533          	srl	x10,x29,x11
 304:	|  |  |  |      01f57513          	andi	x10,x10,31
     ###         if (distance[node] < min_distance) {
 308:	|  |  |  |      00a608b3          	add	x17,x12,x10
 30c:	|  |  |  |      0908c883          	lbu	x17,144(x17)
 310:	|  |  |  |  /-- 0108f663          	bgeu	x17,x16,31c <path_planner.c.2be3d928+0x216>
 314:	|  |  |  |  |   00088813          	addi	x16,x17,0
     ###             min_node = node;
 318:	|  |  |  |  |   00050793          	addi	x15,x10,0
     ###     for (j = 0; j < 4; j++) {
 31c:	|  |  |  |  \-> 00858593          	addi	x11,x11,8
 320:	|  |  |  \----- ffc590e3          	bne	x11,x28,300 <path_planner.c.2be3d928+0x1fa>
 324:	|  |  |         00078813          	addi	x16,x15,0
 328:	\--|--|-------- f6dff06f          	jal	x0,294 <path_planner.c.2be3d928+0x18e>
     ###         NODE_POINT = path_planned[i];
 32c:	   |  \-------> 0006c783          	lbu	x15,0(x13)
 330:	   |            00168693          	addi	x13,x13,1
 334:	   |            00f60423          	sb	x15,8(x12) # 2000008 <__bss_end+0x8>
     ###     for ( i = 0; i < idx; ++i) {
 338:	   \----------- f81ff06f          	jal	x0,2b8 <path_planner.c.2be3d928+0x1b2>

0000033c <_set_tls>:
 33c:	00050213          	addi	x4,x10,0
 340:	00008067          	jalr	x0,0(x1)

00000344 <memcpy>:
 344:	       00050313          	addi	x6,x10,0
 348:	/----- 00060e63          	beq	x12,x0,364 <memcpy+0x20>
 34c:	|  /-> 00058383          	lb	x7,0(x11)
 350:	|  |   00730023          	sb	x7,0(x6)
 354:	|  |   fff60613          	addi	x12,x12,-1
 358:	|  |   00130313          	addi	x6,x6,1
 35c:	|  |   00158593          	addi	x11,x11,1
 360:	|  \-- fe0616e3          	bne	x12,x0,34c <memcpy+0x8>
 364:	\----> 00008067          	jalr	x0,0(x1)

00000368 <memset>:
 368:	       00050313          	addi	x6,x10,0
 36c:	/----- 00060a63          	beq	x12,x0,380 <memset+0x18>
 370:	|  /-> 00b30023          	sb	x11,0(x6)
 374:	|  |   fff60613          	addi	x12,x12,-1
 378:	|  |   00130313          	addi	x6,x6,1
 37c:	|  \-- fe061ae3          	bne	x12,x0,370 <memset+0x8>
 380:	\----> 00008067          	jalr	x0,0(x1)

00000384 <__text_end>:
 384:	0000                	c.unimp
	...
